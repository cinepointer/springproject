<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cinepointer.dao.movieDao">

    <!-- 
        영화 리스트 검색 및 정렬 (장르, 검색어, 정렬, 제한)
        - search: 제목 검색 (부분일치)
        - genre: 장르명 (예: 액션)
        - sort: release(최신순) | popular(인기순)
        - limit: 최대 반환 개수
    -->
    <select id="searchMovies" parameterType="map" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            IFNULL(GROUP_CONCAT(DISTINCT g.genre_name ORDER BY g.genre_name SEPARATOR ','), '') AS genre,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterPath,
            IFNULL(GROUP_CONCAT(DISTINCT a.actor_name ORDER BY a.actor_name SEPARATOR ','), '') AS actors
        FROM movie m
        LEFT JOIN movie_genre mg ON m.movie_num = mg.movie_num
        LEFT JOIN genre g ON mg.genre_num = g.genre_num
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        <where>
            <if test="search != null and search != ''">
                m.movie_title LIKE CONCAT('%', #{search}, '%')
            </if>
            <if test="genre != null and genre != ''">
                g.genre_name = #{genre}
            </if>
        </where>
        GROUP BY m.movie_num
        <choose>
            <when test="sort == 'release'">
                ORDER BY m.movie_release_date DESC
            </when>
            <when test="sort == 'popular'">
                ORDER BY likeCount DESC
            </when>
            <otherwise>
                ORDER BY m.movie_release_date DESC
            </otherwise>
        </choose>
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 영화 상세 조회 (id로 단일 영화) -->
    <select id="findById" parameterType="long" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            IFNULL(GROUP_CONCAT(DISTINCT g.genre_name ORDER BY g.genre_name SEPARATOR ','), '') AS genre,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterPath,
            IFNULL(GROUP_CONCAT(DISTINCT a.actor_name ORDER BY a.actor_name SEPARATOR ','), '') AS actors
        FROM movie m
        LEFT JOIN movie_genre mg ON m.movie_num = mg.movie_num
        LEFT JOIN genre g ON mg.genre_num = g.genre_num
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        WHERE m.movie_num = #{id}
        GROUP BY m.movie_num
    </select>

    <!-- 장르별 인기영화 (genre명, 인기순) -->
    <select id="findByGenre" parameterType="map" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            IFNULL(GROUP_CONCAT(DISTINCT g.genre_name ORDER BY g.genre_name SEPARATOR ','), '') AS genre,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterPath,
            IFNULL(GROUP_CONCAT(DISTINCT a.actor_name ORDER BY a.actor_name SEPARATOR ','), '') AS actors
        FROM movie m
        INNER JOIN movie_genre mg ON m.movie_num = mg.movie_num
        INNER JOIN genre g ON mg.genre_num = g.genre_num
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        WHERE g.genre_name = #{genre}
        GROUP BY m.movie_num
        ORDER BY likeCount DESC
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 최신 영화 (최신순 limit) -->
    <select id="findLatest" parameterType="map" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterPath,
            IFNULL(GROUP_CONCAT(DISTINCT a.actor_name ORDER BY a.actor_name SEPARATOR ','), '') AS actors
        FROM movie m
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        GROUP BY m.movie_num
        ORDER BY m.movie_release_date DESC
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 인기 영화 (좋아요순 limit) -->
    <select id="findPopular" parameterType="map" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterPath,
            IFNULL(GROUP_CONCAT(DISTINCT a.actor_name ORDER BY a.actor_name SEPARATOR ','), '') AS actors
        FROM movie m
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        GROUP BY m.movie_num
        ORDER BY likeCount DESC
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 내 위시리스트(찜 목록) 조회 -->
    <select id="selectWishListByUserNum" parameterType="int" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            IFNULL(GROUP_CONCAT(DISTINCT g.genre_name ORDER BY g.genre_name SEPARATOR ','), '') AS genre,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterPath,
            IFNULL(GROUP_CONCAT(DISTINCT a.actor_name ORDER BY a.actor_name SEPARATOR ','), '') AS actors
        FROM users_movie um
        JOIN movie m ON um.movie_num = m.movie_num
        LEFT JOIN movie_genre mg ON m.movie_num = mg.movie_num
        LEFT JOIN genre g ON mg.genre_num = g.genre_num
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        WHERE um.user_num = #{userNum}
        GROUP BY m.movie_num
    </select>

    <!-- 찜 여부 확인 (1:찜, 0:안함) -->
    <select id="countWish" parameterType="map" resultType="int">
        SELECT COUNT(*) 
        FROM users_movie 
        WHERE user_num = #{userNum} 
          AND movie_num = #{movieNum}
    </select>

    <!-- 찜하기 등록 -->
    <insert id="insertWish" parameterType="map">
        INSERT INTO users_movie (user_num, movie_num) 
        VALUES (#{userNum}, #{movieNum})
    </insert>

    <!-- 찜 취소 -->
    <delete id="deleteWish" parameterType="map">
        DELETE FROM users_movie 
        WHERE user_num = #{userNum} 
          AND movie_num = #{movieNum}
    </delete>

    <!-- 영화 등록 -->
    <insert id="insert" parameterType="com.cinepointer.dto.movieDto">
        INSERT INTO movie (
            movie_title,
            movie_overview,
            movie_release_date,
            movie_poster_path
        ) VALUES (
            #{title},
            #{description},
            #{releaseDate},
            #{posterPath}
        )
    </insert>

    <!-- 출연진 목록 조회 (영화별, actorMovieDto) -->
    <select id="getActorsByMovieNum" parameterType="int" resultType="com.cinepointer.dto.actorMovieDto">
        SELECT 
            am.actor_movie_num AS id,
            am.movie_num AS movieNum,
            am.actor_num AS actorNum,
            a.actor_name AS actorName,
            a.actor_profile_path AS actorProfilePath,
            am.actor_role AS actorRole
        FROM actor_movie am
        JOIN actor a ON am.actor_num = a.actor_num
        WHERE am.movie_num = #{movieNum}
    </select>

    <!-- 배우 상세 정보 목록 조회 (여러 명) -->
    <select id="getActorsByNums" parameterType="list" resultType="com.cinepointer.dto.actorDto">
        SELECT 
            actor_num AS id,
            actor_name AS name,
            actor_profile_path AS profilePath
        FROM actor
        WHERE actor_num IN
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

</mapper>