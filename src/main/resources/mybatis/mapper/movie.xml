<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cinepointer.dao.movieDao">

    <!-- 영화 리스트 검색 및 정렬 (장르 검색 반영) -->
    <select id="searchMovies" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            GROUP_CONCAT(DISTINCT g.genre_name) AS genre,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterUrl,
            GROUP_CONCAT(DISTINCT a.actor_name) AS actors
        FROM movie m
        LEFT JOIN movie_genre mg ON m.movie_num = mg.movie_num
        LEFT JOIN genre g ON mg.genre_num = g.genre_num
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        <where>
            <if test="search != null and search != ''">
                (m.movie_title LIKE CONCAT('%', #{search}, '%'))
            </if>
            <if test="genre != null and genre != ''">
                <choose>
                    <when test="search != null and search != ''">
                        AND g.genre_name = #{genre}
                    </when>
                    <otherwise>
                        g.genre_name = #{genre}
                    </otherwise>
                </choose>
            </if>
        </where>
        GROUP BY m.movie_num
        <choose>
            <when test="sort == 'release'">
                ORDER BY m.movie_release_date DESC
            </when>
            <when test="sort == 'popular'">
                ORDER BY likeCount DESC
            </when>
            <otherwise>
                ORDER BY m.movie_release_date DESC
            </otherwise>
        </choose>
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 상세 조회 -->
    <select id="findById" parameterType="long" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            GROUP_CONCAT(DISTINCT g.genre_name) AS genre,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterUrl,
            GROUP_CONCAT(DISTINCT a.actor_name) AS actors
        FROM movie m
        LEFT JOIN movie_genre mg ON m.movie_num = mg.movie_num
        LEFT JOIN genre g ON mg.genre_num = g.genre_num
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        WHERE m.movie_num = #{id}
        GROUP BY m.movie_num
    </select>

    <!-- 장르별 인기영화 -->
    <select id="findByGenre" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            GROUP_CONCAT(DISTINCT g.genre_name) AS genre,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterUrl,
            GROUP_CONCAT(DISTINCT a.actor_name) AS actors
        FROM movie m
        INNER JOIN movie_genre mg ON m.movie_num = mg.movie_num
        INNER JOIN genre g ON mg.genre_num = g.genre_num
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        WHERE g.genre_name = #{genre}
        GROUP BY m.movie_num
        ORDER BY likeCount DESC
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 최신 영화 -->
    <select id="findLatest" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterUrl,
            GROUP_CONCAT(DISTINCT a.actor_name) AS actors
        FROM movie m
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        GROUP BY m.movie_num
        ORDER BY m.movie_release_date DESC
        LIMIT #{limit}
    </select>

    <!-- 인기 영화 -->
    <select id="findPopular" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterUrl,
            GROUP_CONCAT(DISTINCT a.actor_name) AS actors
        FROM movie m
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        GROUP BY m.movie_num
        ORDER BY likeCount DESC
        LIMIT #{limit}
    </select>

    <!-- 내 위시리스트(찜 목록) 조회 -->
    <select id="selectWishListByUserId" parameterType="string" resultType="com.cinepointer.dto.movieDto">
        SELECT 
            m.movie_num AS id,
            m.movie_title AS title,
            GROUP_CONCAT(DISTINCT g.genre_name) AS genre,
            m.movie_overview AS description,
            m.movie_release_date AS releaseDate,
            (SELECT COUNT(*) FROM users_movie WHERE movie_num = m.movie_num) AS likeCount,
            m.movie_poster_path AS posterUrl,
            GROUP_CONCAT(DISTINCT a.actor_name) AS actors
        FROM users_movie um
        INNER JOIN movie m ON um.movie_num = m.movie_num
        LEFT JOIN movie_genre mg ON m.movie_num = mg.movie_num
        LEFT JOIN genre g ON mg.genre_num = g.genre_num
        LEFT JOIN actor_movie am ON m.movie_num = am.movie_num
        LEFT JOIN actor a ON am.actor_num = a.actor_num
        WHERE um.user_num = #{userId}
        GROUP BY m.movie_num
        ORDER BY m.movie_release_date DESC
    </select>

    <!-- ======================== -->
    <!--      찜하기 기능 추가     -->
    <!-- ======================== -->

    <!-- 1. 찜 여부 확인 -->
    <select id="countWish" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM users_movie
        WHERE user_num = #{userId} AND movie_num = #{movieId}
    </select>

    <!-- 2. 찜 추가 -->
    <insert id="insertWish" parameterType="map">
        INSERT INTO users_movie (user_num, movie_num)
        VALUES (#{userId}, #{movieId})
    </insert>

    <!-- 3. 찜 삭제(찜 해제) -->
    <delete id="deleteWish" parameterType="map">
        DELETE FROM users_movie
        WHERE user_num = #{userId} AND movie_num = #{movieId}
    </delete>

</mapper>
